#!/bin/bash


echo "╔══════════════════════════════════════════════════════════════════════╗"
echo "║  This program will download and install the latest Proton-GE-Custom  ║"
echo "║  Refer to github.com/GloriousEggroll/proton-ge-custom for more info  ║"
echo "╚══════════════════════════════════════════════════════════════════════╝"

# Get the latest Proton-GE-Custom release (url and filename)
url="$(curl -s https://api.github.com/repos/GloriousEggroll/proton-ge-custom/releases/latest | grep browser_download_url | cut -d '"' -f 4)"
filename="$(echo $url | sed 's|.*/||')"

# Check if steam is properly installed
if [ -d "/home/$(whoami)/.local/share/Steam" ]; then
    cd "/home/$(whoami)/.local/share/Steam"
    # Check if compatibilitytools.d folder exists, if not create one
    if [ ! -d "compatibilitytools.d" ]; then
        echo "--> Creating folder for Steam compatibility tools..."
        mkdir "compatibilitytools.d"
    fi
    cd "compatibilitytools.d"
    # Check if current release is already installed
    if [ -d $(echo $filename | sed 's|\.tar\.gz||') ]; then
        echo "--> Current version is already installed. Exiting..."
        exit 1
    else


        # TODO check if VirtualBox and its kernel modules are installed and enabled at boot.
        
        
        if [ $1 == "--compile" ]; then
            # check if vagrant is installed
            if [ ! -x "$(command -v vagrant)" ]; then
                echo "--> Please make sure 'vagrant' is installed on your system!"
                echo "--> (If you have 'vagrant' aliased, this check also fails!)"
                exit 1
            fi
            
            echo "--> Cloning the repository at http://github.com/gloriouseggroll/proton-ge-custom"
            git clone --recurse-submodules http://github.com/gloriouseggroll/proton-ge-custom 
            
            # switch to the right directory.
            cd proton-ge-custom


            # Adding custom patches?
            echo "--> Would you like to add custom patches? (y/n)"
            read input 
            if [ ${input:0:1} == "y" ] || [ ${input:0:1} == "Y" ]; then
                echo "--> Please add your custom patches, edit the file '$pwd/patches/protonprep.sh' accordingly, and then rerun the script."
                echo "--> The patches need to be added to $pwd/patches"
                exit
            fi

            # apply all patches in the patches/ directory, saving the output in a file.
            echo "--> Applying patches..."
            

            chmod a+x patches/protonprep.sh
            patches/protonprep.sh &> patchlog.txt
            # check for errors in the protonprep script.
            echo "--> Checking for errors during patch application..."


            error_count=$(expr $(grep -ic fail patchlog.txt) + $(grep -ic error patchlog.txt))
            # exit the program if there are errors. 
            if [ $error_count > 0 ]; then
                echo "$(grep -i fail patchlog.txt)"
                echo "$(grep -i error patchlog.txt)"
                echo "--> There were $error_count errors during patch application."
            fi
           
            # ask for a name for the build
            echo "--> What would you like to name your build?"
            read build_name

            # launch vagrant
            echo "Launching vagrant, this might take some time..."
            vagrant up
            vagrant up # it might ask to run 'vagrant up' on the first launch

            # if the build name is empty, put this name in.
            # (e.g. proton_custom_2020-06-26_22:40)
            if [ "$build_name" == "" ]; then
                build_name="proton_custom_$(date +%F_%R)"
            fi
            
            # the format to build it is build_name=SomeName make redist | tee buildlog.txt
            # but since build_name is already defined we don't need to set it there
            echo "--> Compiling custom proton..."
            make redist | tee buildlog.txt
            
            # TODO check the build log

            # stop vagrant
            echo "--> Stopping vagrant..."
            vagrant halt
            
            # move the built proton to the right location
            if [ -d "../$build_name" ]; then
                echo "--> The directory exists already!"
                exit
            else
                # move the built proton up two directories,
                # (vagrant_share > proton-ge-custom > compatibilitytools.d)
                echo "Moving the build to the 'compatibilitytools.d' folder..."
                mv vagrant_share/$build_name ../../
            fi
            
            echo "--> Would you like to delete the build files? (y/n)"

            read input
            
            if [ ${input:0:1} == "y" ] || [ ${input:0:1} == "Y" ]; then
                echo "--> Deleting the build files..."
                # need to call rm with -f because of the git files (?)
                rm -rf ../proton-ge-custom 
            fi


        else # if --compile is not set
        # Download latest release, extract the files and delete the archive
            echo "--> Downloading $filename..."
            curl -sL "$url" --output "$filename"
            echo "--> Extracting $filename..."
            tar -xf "$filename"
            echo "--> Removing the compressed archive..."
            rm "$filename"
        fi

        echo "--> Done. Please check the command line for errors and restart Steam for the changes to take effect."
    fi
else
    echo "--> Steam does not seem to be installed. Please make sure everything is installed properly."
    exit 1
fi
